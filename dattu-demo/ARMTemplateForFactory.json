{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "dattu-demo"
		},
		"LS_ADLS_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'LS_ADLS'"
		},
		"LS_ADLS_2_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'LS_ADLS_2'"
		},
		"LS_ASQL_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'LS_ASQL'"
		},
		"LS_ADLS_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://dattuadls.dfs.core.windows.net/"
		},
		"LS_ADLS_2_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://dattugen2.dfs.core.windows.net/"
		},
		"LS_ADLS_KEY_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://dattugen2.dfs.core.windows.net"
		},
		"LS_AKV_properties_typeProperties_baseUrl": {
			"type": "string",
			"defaultValue": "https://dattu.vault.azure.net/"
		},
		"LS_ASQL_KEY_properties_typeProperties_connectionString_secretName": {
			"type": "string",
			"defaultValue": "sqlkey"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/PL_ADVANCED')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DF_ADVANCED_JOINS",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"cust": {},
									"order": {},
									"sink1": {},
									"sink2": {},
									"sink3": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2022-12-27T16:00:18Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/DF_ADVANCED_JOINS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_CREDIT')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow topper creditcard",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DF_CREDIT",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"creditsource": {},
									"sink1": {},
									"sink2": {},
									"sink3": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2022-12-29T11:36:37Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/DF_CREDIT')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_DF_AGGREGATE')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DF_CRIC",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"inputdata": {},
									"sink1": {},
									"sink2": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2022-12-26T14:53:26Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/DF_CRIC')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_INC_LOOKUP')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DF_LOOKUP_UPSERT",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"customers": {},
									"orders": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-01-05T11:20:59Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/DF_LOOKUP_UPSERT')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_LOOKUP')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DF_LOOKUP",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"customers": {},
									"orders": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-01-05T11:20:59Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/DF_LOOKUP')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_NESTED_FOREACH_CHILD')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Metadata files",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DS_METADATA_FILES",
								"type": "DatasetReference",
								"parameters": {
									"foldername": {
										"value": "@pipeline().parameters.PPfoldername",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "ForEachfile",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Metadata files",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Metadata files').output.childItems",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Copy data1",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "DS_ADLS_SOURCE",
											"type": "DatasetReference",
											"parameters": {
												"foldername": {
													"value": "@pipeline().parameters.PPfoldername",
													"type": "Expression"
												},
												"filename": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DS_ADLS_SINK",
											"type": "DatasetReference",
											"parameters": {
												"foldername": {
													"value": "@pipeline().parameters.PPfoldername",
													"type": "Expression"
												},
												"filename": {
													"value": "@concat(replace(item().name,'.csv','_'),formatDateTime(utcnow(),'yyyyMMdd'),'.csv')",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"PPfoldername": {
						"type": "string"
					}
				},
				"annotations": [],
				"lastPublishTime": "2023-01-05T11:20:58Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_METADATA_FILES')]",
				"[concat(variables('factoryId'), '/datasets/DS_ADLS_SOURCE')]",
				"[concat(variables('factoryId'), '/datasets/DS_ADLS_SINK')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_NESTED_FOREACH_MASTER')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get_metadata_folder",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DS_ADLS",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "For_Folder",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get_metadata_folder",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get_metadata_folder').output.childItems",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Execute child pipeline",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "PL_NESTED_FOREACH_CHILD",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"PPfoldername": {
												"value": "@item().name",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-01-05T11:20:59Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_ADLS')]",
				"[concat(variables('factoryId'), '/pipelines/PL_NESTED_FOREACH_CHILD')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_RESTART')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflow1",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"source2": {},
									"source3": {},
									"source4": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2022-12-28T11:13:08Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dataflow1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_SCD1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DF_SCD1",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"custcsv": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-01-06T12:10:30Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/DF_SCD1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_SCD1_SURROGATE')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DF_SCD1_SURROGATE",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"custcsv": {},
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-01-06T12:10:30Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/DF_SCD1_SURROGATE')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Wait1",
						"type": "Wait",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": 10
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_ADLS')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ADLS_KEY",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileSystem": "raw"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "e_id",
						"type": "String"
					},
					{
						"name": "e_name",
						"type": "String"
					},
					{
						"name": "e_hscore",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_ADLS_KEY')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_ADLS_CRIC_CUST')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ADLS_KEY",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "cric_cred.csv",
						"fileSystem": "customers"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "cid",
						"type": "String"
					},
					{
						"name": "cname",
						"type": "String"
					},
					{
						"name": "cscore",
						"type": "String"
					},
					{
						"name": "orderid",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_ADLS_KEY')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_ADLS_CRIC_ORDERS')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ADLS_KEY",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "order_cric.csv",
						"fileSystem": "orders"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "orderid",
						"type": "String"
					},
					{
						"name": "ordername",
						"type": "String"
					},
					{
						"name": "orderdate",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_ADLS_KEY')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_ADLS_CUST')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ADLS_2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "cust3.csv",
						"fileSystem": "customer"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "c_id",
						"type": "String"
					},
					{
						"name": "c_name",
						"type": "String"
					},
					{
						"name": "contact",
						"type": "String"
					},
					{
						"name": "country",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_ADLS_2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_ADLS_DERIVE_SINK')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ADLS",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileSystem": "output"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_ADLS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_ADLS_ORDER')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ADLS_2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "order1.csv",
						"fileSystem": "order"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "c_id",
						"type": "String"
					},
					{
						"name": "ordername",
						"type": "String"
					},
					{
						"name": "orderdate",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_ADLS_2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_ADLS_SCD1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ADLS_KEY",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "scd1_cust1.csv",
						"fileSystem": "customer"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "cid",
						"type": "String"
					},
					{
						"name": "cname",
						"type": "String"
					},
					{
						"name": "manager",
						"type": "String"
					},
					{
						"name": "city",
						"type": "String"
					},
					{
						"name": "start_date",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_ADLS_KEY')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_ADLS_SINK')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ADLS_KEY",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"foldername": {
						"type": "string"
					},
					"filename": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().filename",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().foldername",
							"type": "Expression"
						},
						"fileSystem": "refined"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_ADLS_KEY')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_ADLS_SINK_AGGREGATE')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ADLS",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileSystem": "output1"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_ADLS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_ADLS_SOURCE')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ADLS_KEY",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"foldername": {
						"type": "string"
					},
					"filename": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().filename",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().foldername",
							"type": "Expression"
						},
						"fileSystem": "raw"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "e_id",
						"type": "String"
					},
					{
						"name": "e_name",
						"type": "String"
					},
					{
						"name": "e_hscore",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_ADLS_KEY')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_ADLS_SOURCE_CRIC')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ADLS",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "cric.csv",
						"fileSystem": "input"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "match",
						"type": "String"
					},
					{
						"name": "e_id",
						"type": "String"
					},
					{
						"name": "e_name",
						"type": "String"
					},
					{
						"name": "e_hscore",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_ADLS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_ADLS_cross')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ADLS_2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileSystem": "crossjoin"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_ADLS_2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_ADLS_full')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ADLS_2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileSystem": "fulljoin"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_ADLS_2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_ADLS_inner')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ADLS_2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileSystem": "innerjoin"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_ADLS_2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_ADLS_left')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ADLS_2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileSystem": "leftjoin"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_ADLS_2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_ADLS_right')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ADLS_2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileSystem": "rightjoin"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_ADLS_2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_ASQL_ALLCUST')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ASQL",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "allcust"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_ASQL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_ASQL_LOOKUP')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ASQL_KEY",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "custorders"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_ASQL_KEY')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_ASQL_SCD1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ASQL_KEY",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "csurrkey",
						"type": "varchar"
					},
					{
						"name": "cid",
						"type": "varchar"
					},
					{
						"name": "cname",
						"type": "varchar"
					},
					{
						"name": "manager",
						"type": "varchar"
					},
					{
						"name": "city",
						"type": "varchar"
					},
					{
						"name": "start_date",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "update_date",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "DIM_CUST"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_ASQL_KEY')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_ASQL_SINK_DUPLICATE')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ASQL",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "rejected"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_ASQL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_ASQL_SINK_TOPPERS')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ASQL",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "toppers"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_ASQL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_ASQL_SOURCE_CREDITSCORE')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ASQL",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "cid",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ctype",
						"type": "varchar"
					},
					{
						"name": "cname",
						"type": "varchar"
					},
					{
						"name": "cscore",
						"type": "int",
						"precision": 10
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "credit"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_ASQL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_INDIA')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ADLS_2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileSystem": "india"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_ADLS_2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_METADATA_FILES')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ADLS_KEY",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"foldername": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "@dataset().foldername",
							"type": "Expression"
						},
						"fileSystem": "raw"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_ADLS_KEY')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_OTHERS')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ADLS_2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileSystem": "others"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_ADLS_2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_USA')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ADLS_2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileSystem": "usa"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_ADLS_2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_match1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ADLS_2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "match1.csv",
						"fileSystem": "match1"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "match",
						"type": "String"
					},
					{
						"name": "playerid",
						"type": "String"
					},
					{
						"name": "playername",
						"type": "String"
					},
					{
						"name": "playerscore",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_ADLS_2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_match2')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ADLS_2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileSystem": "match2"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "match",
						"type": "String"
					},
					{
						"name": "playerid",
						"type": "String"
					},
					{
						"name": "playername",
						"type": "String"
					},
					{
						"name": "playerscore",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_ADLS_2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_match3')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ADLS_2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileSystem": "match3"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_ADLS_2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_series')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ADLS_2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileSystem": "seriesdetails"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "match",
						"type": "String"
					},
					{
						"name": "playerid",
						"type": "String"
					},
					{
						"name": "playername",
						"type": "String"
					},
					{
						"name": "playerscore",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_ADLS_2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_ADLS')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('LS_ADLS_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('LS_ADLS_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_ADLS_2')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('LS_ADLS_2_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('LS_ADLS_2_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_ADLS_KEY')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('LS_ADLS_KEY_properties_typeProperties_url')]",
					"accountKey": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "LS_AKV",
							"type": "LinkedServiceReference"
						},
						"secretName": "adlskey"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_AKV')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_AKV')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureKeyVault",
				"typeProperties": {
					"baseUrl": "[parameters('LS_AKV_properties_typeProperties_baseUrl')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_ASQL')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('LS_ASQL_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_ASQL_KEY')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "LS_AKV",
							"type": "LinkedServiceReference"
						},
						"secretName": "[parameters('LS_ASQL_KEY_properties_typeProperties_connectionString_secretName')]"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_AKV')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/integrationRuntime1')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "East US",
						"dataFlowProperties": {
							"computeType": "MemoryOptimized",
							"coreCount": 8,
							"timeToLive": 15,
							"cleanup": false
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_ADVANCED_JOINS')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_ADLS_CUST",
								"type": "DatasetReference"
							},
							"name": "cust"
						},
						{
							"dataset": {
								"referenceName": "DS_ADLS_ORDER",
								"type": "DatasetReference"
							},
							"name": "order"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DS_INDIA",
								"type": "DatasetReference"
							},
							"name": "sink1"
						},
						{
							"dataset": {
								"referenceName": "DS_USA",
								"type": "DatasetReference"
							},
							"name": "sink2"
						},
						{
							"dataset": {
								"referenceName": "DS_OTHERS",
								"type": "DatasetReference"
							},
							"name": "sink3"
						}
					],
					"transformations": [
						{
							"name": "select1"
						},
						{
							"name": "select2"
						},
						{
							"name": "join1"
						},
						{
							"name": "filter1"
						},
						{
							"name": "select3"
						},
						{
							"name": "sort1"
						},
						{
							"name": "split1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          c_id as integer,",
						"          c_name as string,",
						"          contact as string,",
						"          country as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> cust",
						"source(output(",
						"          c_id as integer,",
						"          ordername as string,",
						"          orderdate as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> order",
						"cust select(mapColumn(",
						"          cust_c_id = c_id,",
						"          c_name,",
						"          contact,",
						"          country",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"order select(mapColumn(",
						"          order_c_id = c_id,",
						"          ordername,",
						"          orderdate",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select2",
						"select1, select2 join(cust_c_id == order_c_id,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"join1 filter(isNull(order_c_id)) ~> filter1",
						"filter1 select(mapColumn(",
						"          c_id = cust_c_id,",
						"          c_name,",
						"          contact,",
						"          country",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select3",
						"select3 sort(asc(c_id, true)) ~> sort1",
						"sort1 split(equals(country,'india'),",
						"     equals(country,'usa'),",
						"     disjoint: false) ~> split1@(india, usa, others)",
						"split1@india sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('roundRobin', 3)) ~> sink1",
						"split1@usa sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['usa.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink2",
						"split1@others sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['others.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink3"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_ADLS_CUST')]",
				"[concat(variables('factoryId'), '/datasets/DS_ADLS_ORDER')]",
				"[concat(variables('factoryId'), '/datasets/DS_INDIA')]",
				"[concat(variables('factoryId'), '/datasets/DS_USA')]",
				"[concat(variables('factoryId'), '/datasets/DS_OTHERS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_CREDIT')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_ASQL_SOURCE_CREDITSCORE",
								"type": "DatasetReference"
							},
							"name": "creditsource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DS_ASQL_SINK_DUPLICATE",
								"type": "DatasetReference"
							},
							"name": "sink1"
						},
						{
							"dataset": {
								"referenceName": "DS_ASQL_SINK_TOPPERS",
								"type": "DatasetReference"
							},
							"name": "sink2"
						},
						{
							"dataset": {
								"referenceName": "DS_ASQL_ALLCUST",
								"type": "DatasetReference"
							},
							"name": "sink3"
						}
					],
					"transformations": [
						{
							"name": "windowgeneraaterownumber"
						},
						{
							"name": "filterduplicates"
						},
						{
							"name": "select1"
						},
						{
							"name": "sort1"
						},
						{
							"name": "filterunique"
						},
						{
							"name": "select2"
						},
						{
							"name": "windowrankanddenserank"
						},
						{
							"name": "sort2"
						},
						{
							"name": "splittopprezs"
						},
						{
							"name": "select3"
						},
						{
							"name": "select4"
						},
						{
							"name": "sort3"
						},
						{
							"name": "sort4"
						}
					],
					"scriptLines": [
						"source(output(",
						"          cid as integer,",
						"          ctype as string,",
						"          cname as string,",
						"          cscore as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> creditsource",
						"creditsource window(over(ctype,",
						"          cname,",
						"          cscore),",
						"     asc(cid, true),",
						"     row_number = rowNumber()) ~> windowgeneraaterownumber",
						"windowgeneraaterownumber filter(greaterOrEqual(row_number,2)) ~> filterduplicates",
						"filterduplicates select(mapColumn(",
						"          cid,",
						"          ctype,",
						"          cname,",
						"          cscore",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sort(asc(cid, true),",
						"     partitionBy('hash', 1)) ~> sort1",
						"windowgeneraaterownumber filter(equals(row_number,1)) ~> filterunique",
						"filterunique select(mapColumn(",
						"          cid,",
						"          ctype,",
						"          cname,",
						"          cscore",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select2",
						"select2 window(over(ctype),",
						"     desc(cscore, true),",
						"     rank = rank(),",
						"          denserank = denseRank(),",
						"          row_number = rowNumber()) ~> windowrankanddenserank",
						"windowrankanddenserank sort(asc(denserank, true)) ~> sort2",
						"sort2 split(equals(denserank,1),",
						"     disjoint: true) ~> splittopprezs@(toppers, allcustomers)",
						"splittopprezs@toppers select(mapColumn(",
						"          cid,",
						"          ctype,",
						"          cname,",
						"          cscore",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select3",
						"splittopprezs@allcustomers select(mapColumn(",
						"          cid,",
						"          ctype,",
						"          cname,",
						"          cscore",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select4",
						"select4 sort(asc(cid, true),",
						"     partitionBy('hash', 1)) ~> sort3",
						"select3 sort(asc(cid, true),",
						"     partitionBy('hash', 1)) ~> sort4",
						"sort1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     recreate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink1",
						"sort4 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     recreate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     partitionBy('hash', 1)) ~> sink2",
						"sort3 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     partitionBy('hash', 1)) ~> sink3"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_ASQL_SOURCE_CREDITSCORE')]",
				"[concat(variables('factoryId'), '/datasets/DS_ASQL_SINK_DUPLICATE')]",
				"[concat(variables('factoryId'), '/datasets/DS_ASQL_SINK_TOPPERS')]",
				"[concat(variables('factoryId'), '/datasets/DS_ASQL_ALLCUST')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_CRIC')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_ADLS_SOURCE_CRIC",
								"type": "DatasetReference"
							},
							"name": "inputdata"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DS_ADLS_DERIVE_SINK",
								"type": "DatasetReference"
							},
							"name": "sink1"
						},
						{
							"dataset": {
								"referenceName": "DS_ADLS_SINK_AGGREGATE",
								"type": "DatasetReference"
							},
							"name": "sink2"
						}
					],
					"transformations": [
						{
							"name": "derivedColumn1"
						},
						{
							"name": "aggregate1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          match as integer,",
						"          e_id as integer,",
						"          e_name as string,",
						"          e_hscore as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> inputdata",
						"inputdata derive(playermailid = concat(e_name,'@cric.com')) ~> derivedColumn1",
						"derivedColumn1 aggregate(groupBy(e_name),",
						"     totalscore = sum(e_hscore)) ~> aggregate1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['fulldata.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1",
						"aggregate1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['totalscore.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink2"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_ADLS_SOURCE_CRIC')]",
				"[concat(variables('factoryId'), '/datasets/DS_ADLS_DERIVE_SINK')]",
				"[concat(variables('factoryId'), '/datasets/DS_ADLS_SINK_AGGREGATE')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_LOOKUP')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_ADLS_CRIC_CUST",
								"type": "DatasetReference"
							},
							"name": "customers"
						},
						{
							"dataset": {
								"referenceName": "DS_ADLS_CRIC_ORDERS",
								"type": "DatasetReference"
							},
							"name": "orders"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DS_ASQL_ALLCUST",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "select1"
						},
						{
							"name": "lookup1"
						},
						{
							"name": "alterRow1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          cid as integer,",
						"          cname as string,",
						"          cscore as integer,",
						"          orderid as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> customers",
						"source(output(",
						"          orderid as integer,",
						"          ordername as string,",
						"          orderdate as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> orders",
						"orders select(mapColumn(",
						"          order_orderid = orderid,",
						"          ordername,",
						"          orderdate",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"customers, select1 lookup(orderid == order_orderid,",
						"     multiple: false,",
						"     pickup: 'first',",
						"     asc(ordername, true),",
						"     broadcast: 'auto')~> lookup1",
						"lookup1 alterRow(deleteIf(cname=='abd')) ~> alterRow1",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     recreate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_ADLS_CRIC_CUST')]",
				"[concat(variables('factoryId'), '/datasets/DS_ADLS_CRIC_ORDERS')]",
				"[concat(variables('factoryId'), '/datasets/DS_ASQL_ALLCUST')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_LOOKUP_UPSERT')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_ADLS_CRIC_CUST",
								"type": "DatasetReference"
							},
							"name": "customers"
						},
						{
							"dataset": {
								"referenceName": "DS_ADLS_CRIC_ORDERS",
								"type": "DatasetReference"
							},
							"name": "orders"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DS_ASQL_ALLCUST",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "select1"
						},
						{
							"name": "lookup1"
						},
						{
							"name": "alterRow1"
						},
						{
							"name": "select2"
						}
					],
					"scriptLines": [
						"source(output(",
						"          cid as integer,",
						"          cname as string,",
						"          cscore as integer,",
						"          orderid as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> customers",
						"source(output(",
						"          orderid as integer,",
						"          ordername as string,",
						"          orderdate as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> orders",
						"orders select(mapColumn(",
						"          order_orderid = orderid,",
						"          ordername,",
						"          orderdate",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"customers, select1 lookup(orderid == order_orderid,",
						"     multiple: false,",
						"     pickup: 'first',",
						"     asc(ordername, true),",
						"     broadcast: 'auto')~> lookup1",
						"lookup1 alterRow(deleteIf(cname=='abd'),",
						"     upsertIf(true())) ~> alterRow1",
						"alterRow1 select(mapColumn(",
						"          cid,",
						"          cname,",
						"          cscore,",
						"          cust_orderid = orderid,",
						"          ordername,",
						"          orderdate",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select2",
						"select2 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['cname','cust_orderid'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_ADLS_CRIC_CUST')]",
				"[concat(variables('factoryId'), '/datasets/DS_ADLS_CRIC_ORDERS')]",
				"[concat(variables('factoryId'), '/datasets/DS_ASQL_ALLCUST')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_SCD1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_ADLS_SCD1",
								"type": "DatasetReference"
							},
							"name": "custcsv"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DS_ASQL_SCD1",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "md5hash"
						},
						{
							"name": "alterRow1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          cid as integer,",
						"          cname as string,",
						"          manager as string,",
						"          city as string,",
						"          start_date as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> custcsv",
						"custcsv derive(csurrkey = md5(concat(toString(cid),cname,manager,city,toString(start_date)))) ~> md5hash",
						"md5hash alterRow(upsertIf(true())) ~> alterRow1",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          csurrkey as string,",
						"          cid as string,",
						"          cname as string,",
						"          manager as string,",
						"          city as string,",
						"          start_date as timestamp,",
						"          update_date as timestamp",
						"     ),",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['cid'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_ADLS_SCD1')]",
				"[concat(variables('factoryId'), '/datasets/DS_ASQL_SCD1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_SCD1_SURROGATE')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_ADLS_SCD1",
								"type": "DatasetReference"
							},
							"name": "custcsv"
						},
						{
							"dataset": {
								"referenceName": "DS_ASQL_SCD1",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DS_ASQL_SCD1",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "alterRow1"
						},
						{
							"name": "surrogateKey1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          cid as integer,",
						"          cname as string,",
						"          manager as string,",
						"          city as string,",
						"          start_date as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> custcsv",
						"source(output(",
						"          maxvalue as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'select max(csurrkey) as maxvalue from DIM_CUST',",
						"     format: 'query') ~> source1",
						"surrogateKey1 alterRow(upsertIf(true())) ~> alterRow1",
						"custcsv keyGenerate(output(csurrkey as long),",
						"     startAt: 100000L,",
						"     stepValue: 1L) ~> surrogateKey1",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          csurrkey as string,",
						"          cid as string,",
						"          cname as string,",
						"          manager as string,",
						"          city as string,",
						"          start_date as timestamp,",
						"          update_date as timestamp",
						"     ),",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['cid'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_ADLS_SCD1')]",
				"[concat(variables('factoryId'), '/datasets/DS_ASQL_SCD1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_match1",
								"type": "DatasetReference"
							},
							"name": "source1"
						},
						{
							"dataset": {
								"referenceName": "DS_match2",
								"type": "DatasetReference"
							},
							"name": "source2"
						},
						{
							"dataset": {
								"referenceName": "DS_match3",
								"type": "DatasetReference"
							},
							"name": "source3"
						},
						{
							"dataset": {
								"referenceName": "DS_series",
								"type": "DatasetReference"
							},
							"name": "source4"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DS_series",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "union1"
						},
						{
							"name": "exists1"
						},
						{
							"name": "union2"
						},
						{
							"name": "sort1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          match as integer,",
						"          playerid as integer,",
						"          playername as string,",
						"          playerscore as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source(output(",
						"          match as integer,",
						"          playerid as integer,",
						"          playername as string,",
						"          playerscore as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source2",
						"source(output(",
						"          match as integer,",
						"          playerid as integer,",
						"          playername as string,",
						"          playerscore as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source3",
						"source(output(",
						"          match as integer,",
						"          playerid as integer,",
						"          playername as string,",
						"          playerscore as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source4",
						"source1, source2, source3 union(byName: true)~> union1",
						"union1, source4 exists(equals(union1@match,source4@match)&&equals(union1@playerid, source4@playerid)&&equals(union1@playername,source4@playername)&&equals(union1@playerscore, source4@playerscore),",
						"     negate:true,",
						"     broadcast: 'auto')~> exists1",
						"exists1, source4 union(byName: true,",
						"     partitionBy('hash', 1))~> union2",
						"union2 sort(asc(match, true),",
						"     asc(playerid, true),",
						"     partitionBy('hash', 1)) ~> sort1",
						"sort1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          match as string,",
						"          playerid as string,",
						"          playername as string,",
						"          playerscore as string",
						"     ),",
						"     partitionFileNames:['output.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_match1')]",
				"[concat(variables('factoryId'), '/datasets/DS_match2')]",
				"[concat(variables('factoryId'), '/datasets/DS_match3')]",
				"[concat(variables('factoryId'), '/datasets/DS_series')]"
			]
		}
	]
}